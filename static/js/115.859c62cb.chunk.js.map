{"version":3,"file":"static/js/115.859c62cb.chunk.js","mappings":"6JAUMA,GAAMC,EAAAA,EAAAA,GAAO,MAAPA,CAAcC,EAAAA,GAAYC,EAAAA,GAAOC,EAAAA,GAAOC,EAAAA,GAASC,EAAAA,GAAQC,EAAAA,IACrE,K,4FC8CA,UA7Ca,WACX,OAAwBC,EAAAA,EAAAA,UAAS,IAAjC,eAAOC,EAAP,KAAaC,EAAb,KACQC,GAAYC,EAAAA,EAAAA,MAAZD,QAKR,OAJAE,EAAAA,EAAAA,YAAU,YACRC,EAAAA,EAAAA,IAAcH,GAASI,MAAK,gBAAWN,EAAX,EAAGO,KAAQP,KAAX,OAAwBC,EAAQD,EAAhC,GAC7B,GAAE,CAACE,IACJM,QAAQC,IAAIT,IAEV,8BACmB,IAAhBA,EAAKU,QACJ,SAAC,IAAD,CAAKC,GAAG,KAAR,SACGX,EAAKY,KAAI,YAA4C,IAAzCC,EAAwC,EAAxCA,UAAWC,EAA6B,EAA7BA,KAAMC,EAAuB,EAAvBA,aAAcC,EAAS,EAATA,GAC1C,OACE,UAAC,IAAD,CAAcC,QAAQ,OAAOC,EAAE,OAAOP,GAAG,KAAzC,UAKoB,OAAjBI,GACC,gBACEI,IAAKC,EAAAA,GAAkBC,EAAAA,GAAYN,EACnCO,IAAKR,KAGP,gBAAKK,IAAKI,EAAAA,GAAUD,IAAKR,EAAMU,MAAM,UAEvC,UAAC,IAAD,CAAKC,GAAG,MAAR,WACE,SAAC,IAAD,CAAKC,SAAS,OAAOf,GAAG,KAAxB,SACGG,KAEH,wCACa,kBACVD,UAnBGG,EAwBb,OAGH,+EAIP,C,iXCnDYO,EAAWI,EACXC,EAAYC,EACZC,EAAYC,EAEnBC,EAAS,mCACTC,EAAgBC,EAAAA,EAAAA,OAAa,CACjCC,QAAS,kCAGEf,EAAkB,8BAClBgB,EAAc,QACdf,EAAY,OAEZgB,EAAU,mCAAG,+GAIZJ,EAAcK,IAAd,oBAAuC,CAC/CC,OAAQ,CAAEC,QAASR,KALC,uBAGZS,EAHY,EAGpBlC,KAAQkC,QAHY,kBASfA,GATe,gCAWtBjC,QAAQC,IAAR,MAXsB,yDAAH,qDAeViC,EAAS,mCAAG,WAAM1B,GAAN,gGAIFiB,EAAcK,IAAd,iBAA4BtB,EAA5B,KAAmC,CACpDuB,OAAQ,CAAEC,QAASR,KALA,cAIfzB,EAJe,yBASdA,GATc,gCAWrBC,QAAQC,IAAR,MAXqB,yDAAH,sDAeTJ,EAAa,mCAAG,WAAMW,GAAN,gGAINiB,EAAcK,IAAd,iBAA4BtB,EAA5B,aAA2C,CAC5DuB,OAAQ,CAAEC,QAASR,KALI,cAInBzB,EAJmB,OAQzBC,QAAQC,IAAIF,GARa,kBASlBA,GATkB,gCAWzBC,QAAQC,IAAR,MAXyB,yDAAH,sDAcbkC,EAAgB,mCAAG,WAAM3B,GAAN,gGAITiB,EAAcK,IAAd,iBAA4BtB,EAA5B,oBAAkD,CACnEuB,OAAQ,CAAEC,QAASR,KALO,cAItBzB,EAJsB,yBASrBA,GATqB,gCAW5BC,QAAQC,IAAR,MAX4B,yDAAH,sDAehBmC,EAAW,mCAAG,WAAOC,EAAQC,GAAf,kGAKAb,EAAcK,IAAd,+BACGO,EADH,iBACkBC,EADlB,wBAErB,CAAEP,OAAQ,CAAEC,QAASR,KAPA,uBAKfzB,EALe,EAKfA,KALe,kBAWhBA,GAXgB,gCAavBC,QAAQC,IAAR,MAbuB,yDAAH,uD","sources":["components/Box/Box.jsx","pages/Cast/Cast.jsx","services/Api.jsx"],"sourcesContent":["import styled from '@emotion/styled';\nimport {\n  typography,\n  space,\n  color,\n  flexbox,\n  layout,\n  border,\n} from 'styled-system';\n\nconst Box = styled('div')(typography, space, color, flexbox, layout, border);\nexport default Box;\n","import Box from 'components/Box/Box';\nimport { useEffect } from 'react';\nimport { useState } from 'react';\nimport { useParams } from 'react-router-dom';\n\nimport {\n  castMovieById,\n  BASE_POSTER_URL,\n  CAST_SIZE,\n  NO_PHOTO,\n} from 'services/Api';\n\nconst Cast = () => {\n  const [cast, setCast] = useState([]);\n  const { movieId } = useParams();\n  useEffect(() => {\n    castMovieById(movieId).then(({ data: { cast } }) => setCast(cast));\n  }, [movieId]);\n  console.log(cast);\n  return (\n    <>\n      {cast.length !== 0 ? (\n        <Box as=\"ul\">\n          {cast.map(({ character, name, profile_path, id }) => {\n            return (\n              <Box key={id} display=\"flex\" m=\"10px\" as=\"li\">\n                {/* <img\n                  src={BASE_POSTER_URL + CAST_SIZE + profile_path}\n                  alt={name}\n                /> */}\n                {profile_path !== null ? (\n                  <img\n                    src={BASE_POSTER_URL + CAST_SIZE + profile_path}\n                    alt={name}\n                  />\n                ) : (\n                  <img src={NO_PHOTO} alt={name} width=\"45px\" />\n                )}\n                <Box ml=\"5px\">\n                  <Box fontSize=\"15px\" as=\"h2\">\n                    {name}\n                  </Box>\n                  <p>\n                    character: <br />\n                    {character}\n                  </p>\n                </Box>\n              </Box>\n            );\n          })}\n        </Box>\n      ) : (\n        <p>There are no information about cast for this movie</p>\n      )}\n    </>\n  );\n};\nexport default Cast;\n","import axios from 'axios';\nimport noPoster from '../img/noPoster/noPoster.png';\nimport noImage from '../img//noImage.jpg';\nimport notFoundMovie from '../img//notFoundMovie.jpg';\n\nexport const NO_PHOTO = noImage;\nexport const NO_POSTER = noPoster;\nexport const NOT_FOUND = notFoundMovie;\n\nconst MY_KEY = '918bf745d942a4e02da57dd40b893231';\nconst moviesRequest = axios.create({\n  baseURL: 'https://api.themoviedb.org/3/',\n});\n\nexport const BASE_POSTER_URL = 'https://image.tmdb.org/t/p/';\nexport const POSTER_SIZE = 'w300/';\nexport const CAST_SIZE = 'w45/';\n\nexport const trendMovie = async () => {\n  try {\n    const {\n      data: { results },\n    } = await moviesRequest.get(`/trending/all/day`, {\n      params: { api_key: MY_KEY },\n    });\n\n    // console.log(results);\n    return results;\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nexport const movieById = async id => {\n  // console.log(id);\n\n  try {\n    const data = await moviesRequest.get(`/movie/${id}?`, {\n      params: { api_key: MY_KEY },\n    });\n\n    // console.log(data);\n    return data;\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nexport const castMovieById = async id => {\n  // console.log(id);\n\n  try {\n    const data = await moviesRequest.get(`/movie/${id}/credits?`, {\n      params: { api_key: MY_KEY },\n    });\n\n    console.log(data);\n    return data;\n  } catch (error) {\n    console.log(error);\n  }\n};\nexport const reviewsMovieById = async id => {\n  // console.log(id);\n\n  try {\n    const data = await moviesRequest.get(`/movie/${id}/reviews?&page=1`, {\n      params: { api_key: MY_KEY },\n    });\n\n    // console.log(data);\n    return data;\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nexport const queryByName = async (filter, page) => {\n  // console.log(filter);\n  // console.log(page);\n\n  try {\n    const { data } = await moviesRequest.get(\n      `/search/movie?&query=${filter}&page=${page}&include_adult=false`,\n      { params: { api_key: MY_KEY } }\n    );\n\n    // console.log(data);\n    return data;\n  } catch (error) {\n    console.log(error);\n  }\n};\n"],"names":["Box","styled","typography","space","color","flexbox","layout","border","useState","cast","setCast","movieId","useParams","useEffect","castMovieById","then","data","console","log","length","as","map","character","name","profile_path","id","display","m","src","BASE_POSTER_URL","CAST_SIZE","alt","NO_PHOTO","width","ml","fontSize","noImage","NO_POSTER","noPoster","NOT_FOUND","notFoundMovie","MY_KEY","moviesRequest","axios","baseURL","POSTER_SIZE","trendMovie","get","params","api_key","results","movieById","reviewsMovieById","queryByName","filter","page"],"sourceRoot":""}