{"version":3,"file":"static/js/706.0a68f6f0.chunk.js","mappings":"6JAUMA,GAAMC,EAAAA,EAAAA,GAAO,MAAPA,CAAcC,EAAAA,GAAYC,EAAAA,GAAOC,EAAAA,GAAOC,EAAAA,GAASC,EAAAA,GAAQC,EAAAA,IACrE,K,iGCRaC,EAAY,SAAC,GAAqB,IAAnBC,EAAkB,EAAlBA,YACpBC,GAAWC,EAAAA,EAAAA,MAGjB,OAFAC,QAAQC,IAAIH,IAGV,SAAC,IAAD,CAAKI,GAAG,KAAR,SACGL,EAAYM,KAAI,YAA0B,IAAvBC,EAAsB,EAAtBA,MAAOC,EAAe,EAAfA,KAAMC,EAAS,EAATA,GAC/B,OACE,yBACE,SAAC,KAAD,CAAMC,GAAE,kBAAaD,GAAME,MAAO,CAAEC,KAAMX,GAA1C,gBACGO,QADH,IACGA,EAAAA,EAAQD,KAFJE,EAMZ,KAGN,C,sJCdYI,EAAY,SAAC,GAAoB,IAAlBC,EAAiB,EAAjBA,WAC1B,GAAwCC,EAAAA,EAAAA,MAAxC,eAAOC,EAAP,KAAqBC,EAArB,KAgBA,OACE,SAAC1B,EAAA,EAAD,WACE,kBAAM2B,SAhBkB,SAAAC,GAC1BA,EAAEC,iBACF,IAAMC,EAASF,EAAEG,cAAcC,MAAMC,MAErC,GAAe,KAAXH,EACF,OAAOI,EAAAA,GAAAA,MAAY,2BAErBR,EAA2B,KAAXI,EAAgB,CAAEK,OAAQL,EAAQM,KAAM,GAAM,CAAC,GAC/DxB,QAAQC,IAAIY,GACZF,EAAWK,EAAEG,cAAcC,MAAMC,OAEjCL,EAAEG,cAAcC,MAAMC,MAAQ,EAC/B,EAIG,WACE,kBAAOI,KAAK,OAAOpB,KAAK,WACxB,mBAAQoB,KAAK,SAAb,wBAIP,E,UCoDD,EArEgB,WACd,OAAsCC,EAAAA,EAAAA,UAAS,IAA/C,eAAO7B,EAAP,KAAoB8B,EAApB,KACA,GAAsCD,EAAAA,EAAAA,UAAS,IAA/C,eAAOE,EAAP,KAAoBC,EAApB,KACA,GAAwCjB,EAAAA,EAAAA,MAAxC,eAAOC,EAAP,KAAqBC,EAArB,KAEA,GAA4BY,EAAAA,EAAAA,UAAS,QAArC,eAAOI,EAAP,KAAeC,EAAf,KAEMC,GAASC,EAAAA,EAAAA,UACb,kBAAMC,OAAOC,aAAP,OAAuBtB,GAA7B,GACA,CAACA,IAEKU,EAAiBS,EAAjBT,OAAQC,EAASQ,EAATR,KAChBxB,QAAQC,IAAI2B,IAIZQ,EAAAA,EAAAA,YAAU,WAEO,KAAXb,QAA4Bc,IAAXd,IAMrBQ,EAAU,YAEVO,EAAAA,EAAAA,IAAYf,EAAQC,GAAMe,MAAK,SAAAC,GAC7B,GAAgC,IAA5BA,EAASC,QAAQC,OACnB,OAAOpB,EAAAA,GAAAA,MAAY,kCACVkB,EAASC,QAAQC,OAAS,KACnCpB,EAAAA,GAAAA,KAAW,qCACXS,EAAU,SAEZJ,EAAea,EAASC,SAUxBV,EAAU,YACV/B,QAAQC,IAAIuC,EAASC,QACtB,IACF,GAAE,CAAClB,EAAQC,EAAMI,IAOlB,OACE,UAACxC,EAAA,EAAD,YACE,SAACsB,EAAD,CAAWC,WA1CI,SAAAiB,GACjBC,EAAeD,EAChB,IAyCe,aAAXE,GACC,SAAClC,EAAA,EAAD,CAAWC,YAAaA,KAExB,4CAEU,aAAXiC,IACC,mBAAQL,KAAK,SAASkB,QAdT,WAEjB7B,EAAgB,CAAES,OAAQA,EAAQC,KAAMoB,OAAOpB,GAAQ,GACxD,EAWK,yBAMP,C","sources":["components/Box/Box.jsx","components/MovieList/MovieList.jsx","components/Seachbar/Searchbar.jsx","pages/Movies/Movies.jsx"],"sourcesContent":["import styled from '@emotion/styled';\nimport {\n  typography,\n  space,\n  color,\n  flexbox,\n  layout,\n  border,\n} from 'styled-system';\n\nconst Box = styled('div')(typography, space, color, flexbox, layout, border);\nexport default Box;\n","import Box from 'components/Box/Box';\nimport { Link, useLocation } from 'react-router-dom';\n\nexport const MovieList = ({ askedMovies }) => {\n  const location = useLocation();\n  console.log(location);\n\n  return (\n    <Box as=\"ul\">\n      {askedMovies.map(({ title, name, id }) => {\n        return (\n          <li key={id}>\n            <Link to={`/Movies/${id}`} state={{ from: location }}>\n              {name ?? title}\n            </Link>\n          </li>\n        );\n      })}\n    </Box>\n  );\n};\n// {location.pathname === '/' ? `Movies/${id}` : `${id}`}\n","import { toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport { useSearchParams } from 'react-router-dom';\n\nimport Box from 'components/Box/Box';\n\nexport const Searchbar = ({ inputValue }) => {\n  const [searchParams, setSearchParams] = useSearchParams();\n\n  const onSubmitSearchQuery = e => {\n    e.preventDefault();\n    const search = e.currentTarget.query.value;\n\n    if (search === '') {\n      return toast.error('Please write your query');\n    }\n    setSearchParams(search !== '' ? { filter: search, page: 1 } : {});\n    console.log(searchParams);\n    inputValue(e.currentTarget.query.value);\n\n    e.currentTarget.query.value = '';\n  };\n\n  return (\n    <Box>\n      <form onSubmit={onSubmitSearchQuery}>\n        <input type=\"text\" name=\"query\" />\n        <button type=\"submit\">Search</button>\n      </form>\n    </Box>\n  );\n};\n","import { toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport { useEffect, useState, useMemo } from 'react';\nimport { useSearchParams } from 'react-router-dom';\n\nimport Box from 'components/Box/Box';\nimport { MovieList } from 'components/MovieList/MovieList';\nimport { Searchbar } from 'components/Seachbar/Searchbar';\nimport { queryByName } from 'services/Api';\n// idle - простій\n// pending - очікується\n// resolved - успішно виконане\n// rejected - відхилено(помилка)\n//\n const Movies = () => {\n  const [askedMovies, setAskedMovies] = useState([]);\n  const [searchValue, setSearchValue] = useState('');\n  const [searchParams, setSearchParams] = useSearchParams();\n  // const [page, setPage] = useState(1);\n  const [status, setStatus] = useState('idle');\n  // const filter = searchParams.get('filter');\n  const params = useMemo(\n    () => Object.fromEntries([...searchParams]),\n    [searchParams]\n  );\n  const { filter, page } = params;\n  console.log(searchValue);\n  const inputValue = searchValue => {\n    setSearchValue(searchValue);\n  };\n  useEffect(() => {\n    // setFilter('');\n    if (filter === '' || filter === undefined) {\n      return;\n    }\n    // if (searchValue === '') {\n    //   return;\n    // }\n    setStatus('pending');\n\n    queryByName(filter, page).then(response => {\n      if (response.results.length === 0) {\n        return toast.error('We have no movie by your query');\n      } else if (response.results.length < 20) {\n        toast.warn('There are no more images to load!');\n        setStatus('idle');\n      }\n      setAskedMovies(response.results);\n      // setAskedMovies(prev => {\n      //   console.log(prev, response.results);\n\n      //   if (searchValue === '') {\n      //     return response.results;\n      //   } else {\n      //     return [...prev, ...response.results];\n      //   }\n      // });\n      setStatus('resolved');\n      console.log(response.results);\n    });\n  }, [filter, page, searchValue]);\n\n  const onLoadMore = () => {\n    // setPage(prev => prev + 1);\n    setSearchParams({ filter: filter, page: Number(page) + 1 });\n  };\n\n  return (\n    <Box>\n      <Searchbar inputValue={inputValue} />\n      {status === 'resolved' ? (\n        <MovieList askedMovies={askedMovies} />\n      ) : (\n        <p>Write your query</p>\n      )}\n      {status === 'resolved' && (\n        <button type=\"button\" onClick={onLoadMore}>\n          Load more\n        </button>\n      )}\n    </Box>\n  );\n};\nexport default Movies;\n"],"names":["Box","styled","typography","space","color","flexbox","layout","border","MovieList","askedMovies","location","useLocation","console","log","as","map","title","name","id","to","state","from","Searchbar","inputValue","useSearchParams","searchParams","setSearchParams","onSubmit","e","preventDefault","search","currentTarget","query","value","toast","filter","page","type","useState","setAskedMovies","searchValue","setSearchValue","status","setStatus","params","useMemo","Object","fromEntries","useEffect","undefined","queryByName","then","response","results","length","onClick","Number"],"sourceRoot":""}